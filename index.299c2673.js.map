{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAW,SAAS,aAAa,CAAC,UAClC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAa,SAAS,aAAa,CAAC,gBAqWpC,EAAO,GAnWb,CAAA,e,EAAM,SAAA,KAAA,A,S,C,C,C,E,G,C,C,a,C,E,M,A,U,oC,EAAA,IAAA,CAAA,GAEF,IAAI,CAAC,KAAK,CAAG,SAAS,gBAAgB,CAAC,eACvC,IAAI,CAAC,SAAS,CAAG,SAAS,aAAa,CAAC,eACxC,IAAI,CAAC,QAAQ,CAAG,EAAE,CAClB,IAAI,CAAC,gBAAgB,CAAG,EAAE,CAC1B,IAAI,CAAC,UAAU,CAAG,EAClB,IAAI,CAAC,GAAG,CAAG,GACX,IAAI,CAAC,GAAG,CAAG,EACX,IAAI,CAAC,MAAM,CAAG,EACd,IAAI,CAAC,YAAY,CAAG,CAAC,EAAG,EAAG,EAAG,GAAG,CACjC,IAAI,CAAC,aAAa,CAAG,CAAC,EAAG,EAAG,EAAG,GAAG,CAClC,IAAI,CAAC,YAAY,CAAG,CAAC,EAAG,EAAG,GAAI,GAAG,CAClC,IAAI,CAAC,WAAW,CAAG,CAAC,EAAG,EAAG,GAAI,GAAG,A,CAb/B,O,EAAA,C,CAgBJ,IAAA,OAAA,MAAA,W,I,E,I,AACE,CAAA,IAAI,CAAC,QAAQ,CAAG,EAAE,CAClB,IAAI,CAAC,QAAQ,CAAC,GACd,IAAI,CAAC,SAAS,CAAC,WAAW,CAAG,IAAI,CAAC,MAAM,CAExC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAC,CAAA,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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar startBtn = document.querySelector(\".start\");\nvar messageStart = document.querySelector(\".message-start\");\nvar messageLost = document.querySelector(\".message-lose\");\nvar messageWin = document.querySelector(\".message-win\");\nvar GameFild = /*#__PURE__*/ function() {\n    function GameFild() {\n        _class_call_check(this, GameFild);\n        this.cells = document.querySelectorAll(\".field-cell\");\n        this.scoreFild = document.querySelector(\".game-score\");\n        this.gameFild = [];\n        this.previousGameFild = [];\n        this.randomCell = 0;\n        this.MAX = 15;\n        this.MIN = 0;\n        this._score = 0;\n        this.FIRST_COLUMN = [\n            0,\n            4,\n            8,\n            12\n        ];\n        this.SECOND_COLUMN = [\n            1,\n            5,\n            9,\n            13\n        ];\n        this.THIRD_COLUMN = [\n            2,\n            6,\n            10,\n            14\n        ];\n        this.LAST_COLUMN = [\n            3,\n            7,\n            11,\n            15\n        ];\n    }\n    _create_class(GameFild, [\n        {\n            key: \"init\",\n            value: function init() {\n                var _this = this;\n                this.gameFild = [];\n                this.setScore(0);\n                this.scoreFild.textContent = this._score;\n                this.cells.forEach(function(el, i) {\n                    el.textContent = _this.gameFild[i];\n                    el.removeAttribute(\"class\");\n                    el.classList.add(\"field-cell\");\n                });\n                for(var i = 0; i < 16; i++)this.gameFild.push(null);\n                for(var i1 = 0; i1 < 2; i1++){\n                    this.randomCell = Math.floor(Math.random() * (this.MAX - this.MIN + 1)) + this.MIN;\n                    this.gameFild[this.randomCell] = 2;\n                }\n                this.previousGameFild = _to_consumable_array(this.gameFild);\n                this.renderGameFild();\n                startBtn.textContent = \"Restart\";\n                startBtn.classList.add(\"restart\");\n                messageStart.classList.add(\"hidden\");\n                messageLost.classList.add(\"hidden\");\n                messageWin.classList.add(\"hidden\");\n            }\n        },\n        {\n            key: \"canContinue\",\n            value: function canContinue() {\n                var result = false;\n                if (this.gameFild.includes(null)) return true;\n                for(var i = 0; i < this.gameFild.length; i++){\n                    if (this.LAST_COLUMN.includes(i)) continue;\n                    if (this.gameFild[i] === this.gameFild[i + 1]) {\n                        result = true;\n                        break;\n                    }\n                }\n                for(var i1 = 0; i1 < this.gameFild.length; i1++)if (this.gameFild[i1] === this.gameFild[i1 + 4]) {\n                    result = true;\n                    break;\n                }\n                if (!result) messageLost.classList.remove(\"hidden\");\n                return result;\n            }\n        },\n        {\n            key: \"renderGameFild\",\n            value: function renderGameFild() {\n                var _this = this;\n                this.cells.forEach(function(el, i) {\n                    el.textContent = _this.gameFild[i];\n                    el.removeAttribute(\"class\");\n                    el.classList.add(\"field-cell\");\n                    el.classList.add(\"field-cell--\".concat(el.textContent));\n                });\n            }\n        },\n        {\n            // add new cell with 2 or 4, if it is possible\n            key: \"addNew\",\n            value: function addNew() {\n                var _this = this;\n                if (!this.gameFild.includes(null)) return;\n                if (JSON.stringify(this.previousGameFild) === JSON.stringify(this.gameFild)) return;\n                var newValue = 2;\n                var counter = 5; // to change new cell value from 2 to 4\n                if (counter === 15) counter = this.randomCell;\n                this.randomCell = Math.floor(Math.random() * (this.MAX - this.MIN + 1)) + this.MIN;\n                if (this.randomCell === counter) newValue = 4;\n                if (this.gameFild[this.randomCell] === null) {\n                    this.gameFild[this.randomCell] = newValue;\n                    setTimeout(function() {\n                        _this.renderGameFild();\n                    }, 200);\n                    // check if it can be moved in a given direction\n                    this.previousGameFild = _to_consumable_array(this.gameFild);\n                    return;\n                }\n                this.addNew();\n            }\n        },\n        {\n            // addition of the nearest cell if they are equal\n            key: \"sumCells\",\n            value: function sumCells(arr, method) {\n                for(var i = arr.length - 1; i > 0; i--){\n                    if (arr[i] === null) continue;\n                    if (arr[i] === arr[i - 1]) {\n                        this._score += arr[i];\n                        arr[i] *= 2;\n                        arr.splice(i - 1, 1);\n                        arr[method](null);\n                        break;\n                    }\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                // create rows [[row1], [row2], [row3], [row4]]\n                this.gameFild = this.gameFild.reduce(function(acc, item, i) {\n                    if (i < 4) acc[0].push(item);\n                    if (i > 3 && i < 8) acc[1].push(item);\n                    if (i > 7 && i < 12) acc[2].push(item);\n                    if (i > 11 && i < 16) acc[3].push(item);\n                    return acc;\n                }, [\n                    [],\n                    [],\n                    [],\n                    []\n                ]);\n                // move all filled cells to right + add equel cells\n                this.gameFild = this.gameFild.map(function(row, inx) {\n                    // move all filled cells to right\n                    var rowWithoutNull = row.filter(function(el) {\n                        return el !== null;\n                    });\n                    while(rowWithoutNull.length < 4)rowWithoutNull.unshift(null);\n                    // add equel cells\n                    _this.sumCells(rowWithoutNull, \"unshift\");\n                    return rowWithoutNull;\n                });\n                // collect gameFild for render\n                this.gameFild = this.gameFild.reduce(function(acc, row) {\n                    return _to_consumable_array(acc).concat(_to_consumable_array(row));\n                }, []);\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                // create rows [[row1], [row2], [row3], [row4]]\n                this.gameFild = this.gameFild.reduce(function(acc, item, i) {\n                    if (i < 4) acc[0].push(item);\n                    if (i > 3 && i < 8) acc[1].push(item);\n                    if (i > 7 && i < 12) acc[2].push(item);\n                    if (i > 11 && i < 16) acc[3].push(item);\n                    return acc;\n                }, [\n                    [],\n                    [],\n                    [],\n                    []\n                ]);\n                // move all filled cells to right + add equel cells\n                this.gameFild = this.gameFild.map(function(row, inx) {\n                    // move all filled cells to right\n                    var rowWithoutNull = row.filter(function(el) {\n                        return el !== null;\n                    });\n                    while(rowWithoutNull.length < 4)rowWithoutNull.push(null);\n                    // add equel cells\n                    _this.sumCells(rowWithoutNull, \"push\");\n                    return rowWithoutNull;\n                });\n                // collect gameFild for render\n                this.gameFild = this.gameFild.reduce(function(acc, row) {\n                    return _to_consumable_array(acc).concat(_to_consumable_array(row));\n                }, []);\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this;\n                this.gameFild = this.gameFild.reduce(function(acc, item, i) {\n                    if (_this.FIRST_COLUMN.includes(i)) acc[0].push(item);\n                    if (_this.SECOND_COLUMN.includes(i)) acc[1].push(item);\n                    if (_this.THIRD_COLUMN.includes(i)) acc[2].push(item);\n                    if (_this.LAST_COLUMN.includes(i)) acc[3].push(item);\n                    return acc;\n                }, [\n                    [],\n                    [],\n                    [],\n                    []\n                ]);\n                // move all filled cells to right + add equel cells\n                this.gameFild = this.gameFild.map(function(row, inx) {\n                    // move all filled cells to right\n                    var rowWithoutNull = row.filter(function(el) {\n                        return el !== null;\n                    });\n                    while(rowWithoutNull.length < 4)rowWithoutNull.push(null);\n                    // add equel cells\n                    _this.sumCells(rowWithoutNull.reverse(), \"unshift\");\n                    return rowWithoutNull;\n                });\n                // collect gameFild for render\n                var arr = [];\n                for(var n = this.gameFild.length - 1; n >= 0; n--)for(var i = 0; i < this.gameFild.length; i++)arr.push(this.gameFild[i][n]);\n                this.gameFild = arr;\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this;\n                this.gameFild = this.gameFild.reduce(function(acc, item, i) {\n                    if (_this.FIRST_COLUMN.includes(i)) acc[0].push(item);\n                    if (_this.SECOND_COLUMN.includes(i)) acc[1].push(item);\n                    if (_this.THIRD_COLUMN.includes(i)) acc[2].push(item);\n                    if (_this.LAST_COLUMN.includes(i)) acc[3].push(item);\n                    return acc;\n                }, [\n                    [],\n                    [],\n                    [],\n                    []\n                ]);\n                // move all filled cells to right + add equel cells\n                this.gameFild = this.gameFild.map(function(row, inx) {\n                    // move all filled cells to right\n                    var rowWithoutNull = row.filter(function(el) {\n                        return el !== null;\n                    });\n                    while(rowWithoutNull.length < 4)rowWithoutNull.unshift(null);\n                    // add equel cells\n                    _this.sumCells(rowWithoutNull.reverse(), \"push\");\n                    // console.log(rowWithoutNull)\n                    return rowWithoutNull;\n                });\n                // collect gameFild for render\n                var arr = [];\n                for(var n = this.gameFild.length - 1; n >= 0; n--)for(var i = 0; i < this.gameFild.length; i++)arr.push(this.gameFild[i][n]);\n                this.gameFild = arr;\n            }\n        },\n        {\n            key: \"setScore\",\n            value: function setScore(score) {\n                if (score !== undefined) this._score = score;\n                this.scoreFild.textContent = this._score;\n                if (this._score === 2048) messageWin.classList.remove(\"hidden\");\n            }\n        }\n    ]);\n    return GameFild;\n}();\nvar game = new GameFild();\nstartBtn.addEventListener(\"click\", function(e) {\n    game.init();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    if (!game.gameFild.length || !game.canContinue()) return;\n    var buttons = [\n        \"ArrowRight\",\n        \"ArrowLeft\",\n        \"ArrowUp\",\n        \"ArrowDown\"\n    ];\n    if (e.key === \"ArrowRight\") game.moveRight();\n    if (e.key === \"ArrowLeft\") game.moveLeft();\n    if (e.key === \"ArrowUp\") game.moveUp();\n    if (e.key === \"ArrowDown\") game.moveDown();\n    if (buttons.includes(e.key)) {\n        game.renderGameFild();\n        game.setScore();\n        game.addNew();\n    }\n});\n\n//# sourceMappingURL=index.299c2673.js.map\n","'use strict';\n\nconst startBtn = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageLost = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nclass GameFild {\n  constructor() {\n    this.cells = document.querySelectorAll('.field-cell');\n    this.scoreFild = document.querySelector('.game-score');\n    this.gameFild = [];\n    this.previousGameFild = [];\n    this.randomCell = 0;\n    this.MAX = 15;\n    this.MIN = 0;\n    this._score = 0;\n    this.FIRST_COLUMN = [0, 4, 8, 12];\n    this.SECOND_COLUMN = [1, 5, 9, 13];\n    this.THIRD_COLUMN = [2, 6, 10, 14];\n    this.LAST_COLUMN = [3, 7, 11, 15];\n  }\n\n  init() {\n    this.gameFild = [];\n    this.setScore(0);\n    this.scoreFild.textContent = this._score;\n\n    this.cells.forEach((el, i) => {\n      el.textContent = this.gameFild[i];\n      el.removeAttribute('class');\n      el.classList.add('field-cell');\n    });\n\n    for (let i = 0; i < 16; i++) {\n      this.gameFild.push(null);\n    }\n\n    for (let i = 0; i < 2; i++) {\n      this.randomCell\n        = Math.floor(Math.random() * (this.MAX - this.MIN + 1)) + this.MIN;\n\n      this.gameFild[this.randomCell] = 2;\n    }\n\n    this.previousGameFild = [...this.gameFild];\n\n    this.renderGameFild();\n\n    startBtn.textContent = 'Restart';\n    startBtn.classList.add('restart');\n    messageStart.classList.add('hidden');\n    messageLost.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  }\n\n  canContinue() {\n    let result = false;\n\n    if (this.gameFild.includes(null)) {\n      return true;\n    }\n\n    for (let i = 0; i < this.gameFild.length; i++) {\n      if (this.LAST_COLUMN.includes(i)) {\n        continue;\n      }\n\n      if (this.gameFild[i] === this.gameFild[i + 1]) {\n        result = true;\n        break;\n      }\n    }\n\n    for (let i = 0; i < this.gameFild.length; i++) {\n      if (this.gameFild[i] === this.gameFild[i + 4]) {\n        result = true;\n        break;\n      }\n    }\n\n    if (!result) {\n      messageLost.classList.remove('hidden');\n    }\n\n    return result;\n  }\n\n  renderGameFild() {\n    this.cells.forEach((el, i) => {\n      el.textContent = this.gameFild[i];\n      el.removeAttribute('class');\n      el.classList.add('field-cell');\n      el.classList.add(`field-cell--${el.textContent}`);\n    });\n  }\n  // add new cell with 2 or 4, if it is possible\n  addNew() {\n    if (!this.gameFild.includes(null)) {\n      return;\n    }\n\n    if (\n      JSON.stringify(this.previousGameFild) === JSON.stringify(this.gameFild)\n    ) {\n      return;\n    }\n\n    let newValue = 2;\n    let counter = 5; // to change new cell value from 2 to 4\n\n    if (counter === 15) {\n      counter = this.randomCell;\n    }\n\n    this.randomCell\n      = Math.floor(Math.random() * (this.MAX - this.MIN + 1)) + this.MIN;\n\n    if (this.randomCell === counter) {\n      newValue = 4;\n    }\n\n    if (this.gameFild[this.randomCell] === null) {\n      this.gameFild[this.randomCell] = newValue;\n\n      setTimeout(() => {\n        this.renderGameFild();\n      }, 200);\n\n      // check if it can be moved in a given direction\n      this.previousGameFild = [...this.gameFild];\n\n      return;\n    }\n\n    this.addNew();\n  }\n  // addition of the nearest cell if they are equal\n  sumCells(arr, method) {\n    for (let i = arr.length - 1; i > 0; i--) {\n      if (arr[i] === null) {\n        continue;\n      }\n\n      if (arr[i] === arr[i - 1]) {\n        this._score += arr[i];\n        arr[i] *= 2;\n        arr.splice(i - 1, 1);\n        arr[method](null);\n        break;\n      }\n    }\n  }\n\n  moveRight() {\n    // create rows [[row1], [row2], [row3], [row4]]\n    this.gameFild = this.gameFild.reduce(\n      (acc, item, i) => {\n        if (i < 4) {\n          acc[0].push(item);\n        }\n\n        if (i > 3 && i < 8) {\n          acc[1].push(item);\n        }\n\n        if (i > 7 && i < 12) {\n          acc[2].push(item);\n        }\n\n        if (i > 11 && i < 16) {\n          acc[3].push(item);\n        }\n\n        return acc;\n      },\n      [[], [], [], []],\n    );\n\n    // move all filled cells to right + add equel cells\n    this.gameFild = this.gameFild.map((row, inx) => {\n      // move all filled cells to right\n      const rowWithoutNull = row.filter((el) => el !== null);\n\n      while (rowWithoutNull.length < 4) {\n        rowWithoutNull.unshift(null);\n      }\n\n      // add equel cells\n      this.sumCells(rowWithoutNull, 'unshift');\n\n      return rowWithoutNull;\n    });\n\n    // collect gameFild for render\n    this.gameFild = this.gameFild.reduce((acc, row) => {\n      return [...acc, ...row];\n    }, []);\n  }\n\n  moveLeft() {\n    // create rows [[row1], [row2], [row3], [row4]]\n    this.gameFild = this.gameFild.reduce(\n      (acc, item, i) => {\n        if (i < 4) {\n          acc[0].push(item);\n        }\n\n        if (i > 3 && i < 8) {\n          acc[1].push(item);\n        }\n\n        if (i > 7 && i < 12) {\n          acc[2].push(item);\n        }\n\n        if (i > 11 && i < 16) {\n          acc[3].push(item);\n        }\n\n        return acc;\n      },\n      [[], [], [], []],\n    );\n\n    // move all filled cells to right + add equel cells\n    this.gameFild = this.gameFild.map((row, inx) => {\n      // move all filled cells to right\n      const rowWithoutNull = row.filter((el) => el !== null);\n\n      while (rowWithoutNull.length < 4) {\n        rowWithoutNull.push(null);\n      }\n\n      // add equel cells\n      this.sumCells(rowWithoutNull, 'push');\n\n      return rowWithoutNull;\n    });\n\n    // collect gameFild for render\n    this.gameFild = this.gameFild.reduce((acc, row) => {\n      return [...acc, ...row];\n    }, []);\n  }\n\n  moveUp() {\n    this.gameFild = this.gameFild.reduce(\n      (acc, item, i) => {\n        if (this.FIRST_COLUMN.includes(i)) {\n          acc[0].push(item);\n        }\n\n        if (this.SECOND_COLUMN.includes(i)) {\n          acc[1].push(item);\n        }\n\n        if (this.THIRD_COLUMN.includes(i)) {\n          acc[2].push(item);\n        }\n\n        if (this.LAST_COLUMN.includes(i)) {\n          acc[3].push(item);\n        }\n\n        return acc;\n      },\n      [[], [], [], []],\n    );\n\n    // move all filled cells to right + add equel cells\n    this.gameFild = this.gameFild.map((row, inx) => {\n      // move all filled cells to right\n      const rowWithoutNull = row.filter((el) => el !== null);\n\n      while (rowWithoutNull.length < 4) {\n        rowWithoutNull.push(null);\n      }\n\n      // add equel cells\n      this.sumCells(rowWithoutNull.reverse(), 'unshift');\n\n      return rowWithoutNull;\n    });\n\n    // collect gameFild for render\n    const arr = [];\n\n    for (let n = this.gameFild.length - 1; n >= 0; n--) {\n      for (let i = 0; i < this.gameFild.length; i++) {\n        arr.push(this.gameFild[i][n]);\n      }\n    }\n\n    this.gameFild = arr;\n  }\n\n  moveDown() {\n    this.gameFild = this.gameFild.reduce(\n      (acc, item, i) => {\n        if (this.FIRST_COLUMN.includes(i)) {\n          acc[0].push(item);\n        }\n\n        if (this.SECOND_COLUMN.includes(i)) {\n          acc[1].push(item);\n        }\n\n        if (this.THIRD_COLUMN.includes(i)) {\n          acc[2].push(item);\n        }\n\n        if (this.LAST_COLUMN.includes(i)) {\n          acc[3].push(item);\n        }\n\n        return acc;\n      },\n      [[], [], [], []],\n    );\n\n    // move all filled cells to right + add equel cells\n    this.gameFild = this.gameFild.map((row, inx) => {\n      // move all filled cells to right\n      const rowWithoutNull = row.filter((el) => el !== null);\n\n      while (rowWithoutNull.length < 4) {\n        rowWithoutNull.unshift(null);\n      }\n\n      // add equel cells\n      this.sumCells(rowWithoutNull.reverse(), 'push');\n\n      // console.log(rowWithoutNull)\n      return rowWithoutNull;\n    });\n\n    // collect gameFild for render\n    const arr = [];\n\n    for (let n = this.gameFild.length - 1; n >= 0; n--) {\n      for (let i = 0; i < this.gameFild.length; i++) {\n        arr.push(this.gameFild[i][n]);\n      }\n    }\n\n    this.gameFild = arr;\n  }\n\n  setScore(score) {\n    if (score !== undefined) {\n      this._score = score;\n    }\n\n    this.scoreFild.textContent = this._score;\n\n    if (this._score === 2048) {\n      messageWin.classList.remove('hidden');\n    }\n  }\n}\n\nconst game = new GameFild();\n\nstartBtn.addEventListener('click', (e) => {\n  game.init();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (!game.gameFild.length || !game.canContinue()) {\n    return;\n  }\n\n  const buttons = ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown'];\n\n  if (e.key === 'ArrowRight') {\n    game.moveRight();\n  }\n\n  if (e.key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (e.key === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (e.key === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  if (buttons.includes(e.key)) {\n    game.renderGameFild();\n    game.setScore();\n    game.addNew();\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","startBtn","document","querySelector","messageStart","messageLost","messageWin","game","protoProps","GameFild","_class_call_check","instance","Constructor","cells","querySelectorAll","scoreFild","gameFild","previousGameFild","randomCell","MAX","MIN","_score","FIRST_COLUMN","SECOND_COLUMN","THIRD_COLUMN","LAST_COLUMN","key","value","_this","setScore","textContent","forEach","el","removeAttribute","classList","add","push","i1","Math","floor","random","renderGameFild","result","includes","remove","concat","JSON","stringify","newValue","setTimeout","addNew","method","splice","reduce","acc","item","map","row","inx","rowWithoutNull","filter","unshift","sumCells","reverse","score","undefined","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","addEventListener","e","init","canContinue","moveRight","moveLeft","moveUp","moveDown","buttons"],"version":3,"file":"index.299c2673.js.map"}